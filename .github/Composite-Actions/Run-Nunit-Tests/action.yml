name: "Run Unit Tests"
description: "Runs unit tests using NUnit."
author: "Mike Burgess"

inputs:
  NUGET_SOURCE:
    description: "NuGet source setting."
    required: true
  NUNIT_EXPRESSION:
    description: 'NUnit expression in Test Selection Language: https://docs.nunit.org/articles/nunit/running-tests/Test-Selection-Language.html. Example: "cat == Unit||cat == Test_Unit"'
    required: true
  NUNIT_APP_CONFIG_FILE:
    description: 'File location for the app config. Example: "Cogstate.Platform/Cogstate.Tests.WebApi/App.config"'
    required: false
  NUGET_CONFIG_FULL_PATH:
    description: 'Full path to the nuget.config file. Example: "$PWD\nuget.config"'
    default: '$PWD\nuget.config'
    required: false
  TEST_FILE_FILTER_PATTERN:
    description: 'Test file filter with * wildcards. Example: "Cogstate.*.Test.dll"'
    default: "Cogstate.*.Test.dll"
    required: false
  TEST_FOLDER_FILTER_PATTERN:
    description: 'Test folder filter with * wildcards. Example: "*bin"'
    default: "*bin"
    required: false
  START_IN_FOLDER:
    description: 'Directory to start in. Example "webapi". Default is current directory.'
    default: "."
    required: false
  NUNIT_PATH:
    description: "Path to nunit3-console.exe"
    required: false

runs:
  using: "composite"
  steps:
    - name: Run NUnit Tests
      run: |
        try {
            # Enable strict error handling
            $ErrorActionPreference = 'Stop'

            # Determine the starting directory
            if ("${{ inputs.START_IN_FOLDER }}" -eq ".") {
              $startInFolder = Get-Location
            } else {
              $startInFolder = "${{ inputs.START_IN_FOLDER }}"
            }

            # Path to the PowerShell script
            $scriptPath = "${{ github.action_path }}/../../../Powershell/Scripts/run-nunit.ps1"

            # Initialize a hashtable to hold script arguments
            $args = @{
              nunitExpression        = "${{ inputs.NUNIT_EXPRESSION }}"
              nugetConfigFullPath    = "${{ inputs.NUGET_CONFIG_FULL_PATH }}"
              nunitAppConfigFile     = "${{ inputs.NUNIT_APP_CONFIG_FILE }}"
              testFileFilterPattern  = "${{ inputs.TEST_FILE_FILTER_PATTERN }}"
              testFileFolderFilter   = "${{ inputs.TEST_FOLDER_FILTER_PATTERN }}"
              nugetSource            = "${{ inputs.NUGET_SOURCE }}"
              startInFolder          = $startInFolder
            }

            # Conditionally add the nunitPath parameter if NUNIT_PATH is provided and not empty
            if ("${{ inputs.NUNIT_PATH }}" -and "${{ inputs.NUNIT_PATH }}" -ne "") {
              $args.nunitPath = "${{ inputs.NUNIT_PATH }}"
            }

            # Debug: output the arguments being passed
            Write-Output "Executing script: $scriptPath with arguments:"
            foreach ($key in $args.Keys) {
              Write-Output "  -${key}: $($args[$key])"
            }

            # Execute the PowerShell script with the assembled arguments
            & $scriptPath @args
          }
          catch {
            Write-Error "FAILED: $_"
            exit 1
          }
      shell: pwsh
#        pwsh -noninteractive -command "try { $ErrorActionPreference='Stop'; . '{0}' } catch { Write-Error 'FAILED: $_'; throw; } if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) { exit $LASTEXITCODE }"
